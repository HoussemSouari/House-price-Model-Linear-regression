# -*- coding: utf-8 -*-
"""Linear regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fIdAdZwZtkYx5Qa_i_VCKZSb80jPY7_X
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as pyplot
from sklearn.linear_model import LinearRegression

df = pd.read_csv("Housing.csv")

df.head()

df

df.isnull().sum()

df['mainroad'] = df['mainroad'].replace({'yes': 1, 'no': 0})
df['guestroom']= df['guestroom'].replace({'yes': 1, 'no': 0})
df['basement'] = df['basement'].replace({'yes': 1, 'no': 0})
df['hotwaterheating'] = df['hotwaterheating'].replace({'yes': 1, 'no': 0})
df['airconditioning'] = df['airconditioning'].replace({'yes': 1, 'no': 0})
df

df_new = df[['price', 'area', 'bedrooms','bathrooms', 'stories', 'mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning']]
df_new

import seaborn as sns

correlation_matrix = df_new.corr()

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", annot_kws={"size": 10})
plt.title('Correlation Heatmap')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
predictor_vars = ['area', 'bedrooms', 'stories', 'mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning']

# Create individual scatter plots for each predictor variable
for var in predictor_vars:
    plt.figure(figsize=(4, 2))
    plt.scatter(df_new[var], df_new['price'], alpha=0.5)
    plt.title(f'Scatter plot of {var} vs Price')
    plt.xlabel(var)
    plt.ylabel('Price')
    plt.grid(True)
    plt.show()

df_new=df_new.rename(columns={'hotwaterheating':'hotwater','airconditioning':'ac'})

df_new

df_final = df_new[['price','area','bedrooms','bathrooms','stories','hotwater','ac','stories','mainroad','guestroom','basement']]
df_final

X=df_final.iloc[:,1::]
y=df_final["price"]

X.shape
X

y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2)

from sklearn.preprocessing import PolynomialFeatures

pol=PolynomialFeatures(degree=2)
X_train=pol.fit_transform(X_train)
X_train=pd.DataFrame(X_train)

X_test=pol.transform(X_test)

X_train.shape

y_train.shape

final_df2=pd.concat([X_train,y_train], axis=1)

final_df2

final_df2.dropna(inplace=True)



plt.figure(figsize=(20, 15))
sns.heatmap(final_df2.corr(), annot=True, cmap='coolwarm', fmt=".2f", annot_kws={"size": 5})

r = LinearRegression()
r.fit(X, y)

y_pred=r.predict(X)

from sklearn.metrics import accuracy_score

from sklearn.metrics import r2_score
r2 = r2_score(y, y_pred)
r2

y_test.shape

y_pred.shape

